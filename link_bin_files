#! /usr/bin/env python

import os
from os import listdir
from os.path import join


home_bin = join(os.path.expanduser('~'), 'bin')
src = "/home/traveller/vivaine/vivaine/src"


def main():

    if not os.path.exists(home_bin):
        os.mkdir(home_bin)

    # A list of absolute paths of executables we need to symlink to.
    execs = get_files(src, 'bin')

    # A list of tuples. (absolute paths to executables, absolute paths
    # to symlinks we need to create).
    exec_syms = []

    for i in execs:
        symlink = os.path.basename(i)
        symlink_path = join(home_bin, symlink)
        exec_syms.append((i, symlink_path))

    for i in exec_syms:
        make_symlink(i[0], i[1])


###############################################################################
# mini-library (this code is duplicated in link_dotfiles)
###############################################################################


def make_symlink(file_name, link_name):
    try:
        os.symlink(file_name, link_name)
        print "Created symlink at %s" % link_name
    except OSError as e:
        if e.strerror == 'File exists':
            print "File exists at %s" % link_name
        else:
            print "OSError: %s" % e.strerror


def get_files(src, target):
    """
    Return a list of all the files within the directories <src>/*/<target>/
    """
    files = []

    for program in listdir(src):
        program_path = join(src, program)

        for i in listdir(program_path):
            if i == target:
                target_path = join(program_path, i)

                for j in listdir(target_path):
                    files.append(join(target_path, j))
    return files


if __name__ == '__main__':
    main()
